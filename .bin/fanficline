#!/usr/bin/env ruby

require 'net/http'
require 'uri'
require 'nokogiri'
require 'typhoeus'

class Fic
  def initialize(url, star)
    @url = URI url
    @star = star
    @doc = Nokogiri::HTML Typhoeus.get(@url, followlocation: true).body
    # puts @doc.inspect
  end

  def fantag(dom)
    case dom
    when /star wars/i
      'SW'
    when /thor/i
      'Thor'
    when /avengers/i, /marvel/i, /daredevil/i
      'Marvel'
    when /harry potter/i
      'HP'
    when /lord of the rings/i, /LotR/, /LoTR/, /hobbit/i
      'LotR'
    when /stargate/i, /sg-?1/i
      'Stargate'
    when /naruto/i
      'Naruto'
    when /pok.mon/i
      'Pokémon'
    when /x-?men/i
      'X-Men'
    when /dresden/i
      'Dresden'
    when /buffy/i
      'Buffy'
    when /game of thrones/i, /GoT/, /song of ice/i
      'GoT'
    when /aang/i, /avatar/i, /airbender/i, /korra/i
      'Avatar'
    when /merlin/i
      'Merlin'
    when /good omens/i
      'Good Omens'
    when /sherlock/i
      'Sherlock'
    when /\bhowl\b/i, /ghibli/i
      'Ghibli'
    when /good omens/i
      'Good Omens'
    when /original/i
      'Original'
    end
  end

  def fandoms
    [fandom]
  end

  def tag
    tags = fandoms
      .map { |dom| fantag dom }
      .compact
      .uniq

    if tags.empty?
      '?'
    else
      tags.join '/'
    end
  end

  def gettext(el)
    return unless el
    return unless el.text
    el.text.strip
  end

  def to_s
    starred = if @star then '**' else '' end

    sprintf " - {%s} %s[%s](%s)%s. {%ik words%s}",
      tag,
      starred,
      title,
      first_chapter,
      starred,
      (words / 1000).round,
      if complete?
        ''
      else
        ' atow'
      end
  end

  def self.from_url(url)
    url = url.strip

    star = url.end_with?('*') || url.end_with?('×')
    url.gsub!(/[\*×]$/u, '')

    kinds = [
      Ao3Series,
      Ao3,
      Ffn,
    ]

    for kind in kinds
      if kind.is(url)
        return kind.new url, star
      end
    end
  end
end

class Ao3 < Fic
  DOMAIN = "archiveofourown.org"

  def self.is(url)
    URI(url).host == DOMAIN
  end

  def title
    gettext(
      @doc.at_css('h2.title') ||
      @doc.at_css('.work.blurb .heading a[href^="/works/"]')
    )
  end

  def fandoms
    [
      @doc.css('.fandom .tag').to_a,
      @doc.css('.fandoms .tag').to_a
    ].flatten.map { |el| gettext el }.compact
  end

  def work_id
    %r{#{DOMAIN}/works/(\d+)}.match(@url.to_s)[1].strip
  end

  def first_chapter
    "https://#{DOMAIN}/works/#{work_id}"
  end

  def words
    (gettext(@doc.at_css('.stats dd.words')) || '').gsub(/,/, '').to_f
  end

  def chapters
    ch = gettext(@doc.at_css('.stats dd.chapters')) || '1/?'
    ch.split('/').map { |c| c.to_i }
  end

  def complete?
    chapters[0] == chapters[1]
  end
end

class Ao3Series < Ao3
  def self.is(url)
    Ao3.is(url) and %r{/series/} =~ url
  end

  def title
    clean = /(\bau\b|\b(multi|uni)?'?verse\b|'\s*$|^\s*')/i
    t = (gettext(@doc.at_css('#main.series-show > h2.heading')) || '???')
      .gsub(clean, '')
      .gsub(clean, '')
      .gsub(clean, '')
      .strip
    "‘#{t}’ series"
  end

  def work_id
    %r{#{DOMAIN}/series/(\d+)}.match(@url.to_s)[1].strip
  end

  def first_chapter
    "https://#{DOMAIN}/series/#{work_id}"
  end

  def words
    @doc.css('.stats dd.words')
        .to_a
        .map { |w| (gettext(w) || '').gsub(/,/, '').to_f }
        .sum
  end

  def complete?
    gettext(
      @doc.at_css('#main.series-show .series.meta dd.stats > dl.stats')
    ) =~ /Complete:\s*Yes/
  end
end

class Ffn < Fic
  DOMAIN = "fanfiction.net"

  def self.is(url)
    URI(url).host =~ /^(.+\.)?#{DOMAIN}$/
  end

  def title
    gettext(@doc.at_css('#profile_top > b'))
  end

  def fandoms
    [
      @doc.at_css('#pre_story_links > .lc-left'),
      @doc.at_css('#profile_top > div')
    ].map { |el| gettext el }.compact
  end

  def work_id
    %r{#{DOMAIN}/s/(\d+)}.match(@url.to_s)[1].strip
  end

  def first_chapter
    "https://www.#{DOMAIN}/s/#{work_id}"
  end

  def stats
    gettext(@doc.at_css('#profile_top > span:last-child'))
  end

  def words
    %r{- +Words: ([\d,]+) +-}.match(stats)[1].strip.gsub(/,/, '').to_f
  end

  def chapters
    total = %r{- +Chapters: (\d+) +-}.match(stats)[1].strip.to_i
    complete = %r{- +Status: Complete +-} =~ stats
    [total, if complete then total else 0 end]
  end

  def complete?
    chapters[0] == chapters[1]
  end
end

if ARGV.first == '-'
  out = File.open 'fanfics', 'a+'
  print "> "
  STDIN.each_line do |url|
    fic = Fic.from_url url
    if fic
      out.puts fic.to_s
      puts fic.to_s
      print "> "
    end
  end
  exit
end

ARGV.each do |url|
  fic = Fic.from_url url
  if fic
    puts fic.to_s
  end
end
